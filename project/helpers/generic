#!/bin/bash

# Return 0 (true) if the command in param $1 exist
# Usage : if is_command_exist $1; then
function is_command_exist {

	if [ $# -ne 1 ]; then
		return 1
	fi

	if which $1 > /dev/null; then
		return 0
	fi

	return 1

}

# Call pulsion from pulsion
function pulsion {

	# Looking for pulsion config in parent folders
	while ! [ -f pulsion/pulsion ]
	do
		if [ $(pwd) == "/" ]
		then
			echo "/!\ This project is not a Pulsion project /!\ "
			echo "You can run \"pulsion init\" to initialize a Pulsion project"
			exit 0
		fi
		cd ..
	done

	./pulsion/pulsion "$@"

}

# Forward a param to another command if present (doesn't forward param value !)
function forward_param {
    param="$1"
    shift

    if has_param "$param" "$@"; then
        echo "$param"
    fi
}

# Exit if user is not root
function require_root {

	if ! is_root; then
		echo "/!\ Usage : sudo pulsion/pulsion"
		exit 1
	fi

}

# Return 0 (true) if the function in param $1 exist
# Usage : if is_function_exist $1; then
function is_function_exist {

	if [ $# -ne 1 ]; then
		return 1
	fi

	if type -t $1 | grep -q "^function$" ; then
		return 0
	fi

	return 1

}

# Return 0 (true) if the root mode is activated
function is_root {

	if [ "$(id -u)" != "0" ]; then
		return 1
	fi
	return 0

}

# Display the platform
# Usage : if [[ $(get_platform) != "osx" ]];
function get_platform {

	unamestr=`uname`
	if [[ "$unamestr" == 'Linux' ]]; then
	   echo "linux"
	elif [[ "$unamestr" == 'Darwin' ]]; then
	   echo "osx"
	fi

}

# Return true if the list of arguments contains $1
function has_param {

	search=$1
	shift
	for param in "$@"
	do
		if [[ "$param" == "$search" ]]; then
			return 0
		fi
	done

	return 1

}

# Return the value associate to one param
# myName="$(get_param_value --name "$@")"
function get_param_value {

	search=$1
	next=0

	shift
	for param in "$@"
	do
		if [[ "$param" == "$search" ]]; then
			next=1
		elif [ $next -eq 1 ]; then
			echo "$param"
			return 0
		fi
	done

	return 1

}

# Display or not the param $1 depending on the verbose level
function print {

	if [ $# -eq 2 ]; then
		if [ $1 -le $VERBOSE ]; then
			echo "$2"
		fi
	fi

	# If no verbose, always display the value
	if [ $# -eq 1 ]; then
		echo "$1"
	fi

}

function verbose {

	print "$@"

}

function p {

	print "$@"

}

# Search a value in an array and return the index where value is found
# Return -1 if nothing is found
# index="$(get_index_in_array "$value" "${array[@]}")"
function get_index_in_array {
	value=$1
	shift
	array=("${@}")

	for i in "${!array[@]}"; do
	   if [[ "${array[$i]}" = "${value}" ]]; then
		   echo "$i"
		   return 0;
	   fi
	done

	echo "-1"
	return 1
}

# Sudo is impossible directly on a function, inside a script
# So we emulate a fake extern file with function body inside
function exesudo {

	mkdir -p /tmp/pulsion/shm

    local _funcname_="$1"
    local params=( "$@" )               ## array containing all params passed here
    local tmpfile="/tmp/pulsion/shm/$RANDOM"    ## temporary file
    local filecontent                   ## content of the temporary file
    local regex                         ## regular expression
    local func                          ## function source

    # Shift the first param (which is the name of the function)
    unset params[0]              ## remove first element
    # params=( "${params[@]}" )     ## repack array

    content="#!/bin/bash\n\n"

    # Write the params array
    content="${content}params=(\n"

    regex="\s+"
    for param in "${params[@]}"
    do
        if [[ "$param" =~ $regex ]]; then
            content="${content}\t\"${param}\"\n"
        else
            content="${content}\t${param}\n"
        fi
    done

    content="$content)\n"
    echo -e "$content" > "$tmpfile"

    # Append the function source
    echo "#$( type "$_funcname_" )" >> "$tmpfile"

    # Append the call to the function
    echo -e "\n$_funcname_ \"\${params[@]}\"\n" >> "$tmpfile"

    # Execute the temporary file with sudo
    sudo bash "$tmpfile"
    rm "$tmpfile"

}
