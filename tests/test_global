#!/bin/bash

. tests/include/environment_variable

# Test the loading of config
test_load_config_file() {

	# Verif that pulsion load the test configuration file with -c option
	counter=`$CONSOLE | grep -c $CONFIG_CONSOLE_FILE`
	assertTrue "Pulsion test config file can't be loaded" "[ ${counter} -gt 0 ]"

}

# Test functions of config file loaded
test_read_list_available() {

	config="$(echo $CONSOLE)_available"
	list="$config list"

	commands=$($list command "")
	help_long=$($config c1 --help)
	help_short=$($config c1 -h)
	process_launch=$($config c2 process)

	# Test the detection of installer and command function
	assertTrue "c1 command must be found" "[ `echo $commands | grep -c c1` -eq 1 ]"
	assertTrue "c2 command must be found" "[ `echo $commands | grep -c c2` -eq 1 ]"

	# Test calling help and process
	assertEquals "Two different ways to display help must be equals display" "$help_long" "$help_short"
	assertTrue "Help c1 must be display the help" "[ `echo $help_short | grep -c ok_help_1` -eq 1 ]"
	assertTrue "Process c2 must be execute" "[ `echo $process_launch | grep -c ok_process_2` -eq 1 ]"

}

# Test parameters reader
test_parameter_reader() {

	counter=`$CONSOLE parameters --force ecran machine -t ok xd | grep -c "ok"`
	assertTrue "Read of parameters failed" "[ ${counter} -eq 1 ]"

}

# Test parameters reader
# test_stream_simple() {
# 
# 	successCounter=`$CONSOLE stream | grep -c "yes"`
# 	failCounter=`$CONSOLE stream | grep -c "no"`
# 	filterCounter=`$CONSOLE streamfilter | grep -c "mongoose"`
# 	filterFailCounter=`$CONSOLE streamfilter | grep -c "filter"`
# 
# 	assertTrue "Stream don't write while verbose is good" "[ ${successCounter} -eq 1 ]"
# 	assertTrue "Stream write while verbose is bad" "[ ${failCounter} -eq 0 ]"
# 	assertTrue "Stream filter fail to match regex" "[ ${filterCounter} -eq 1 ]"
# 	assertTrue "Stream filter does not filter" "[ ${filterFailCounter} -eq 0 ]"
# 
# }
